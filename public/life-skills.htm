<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="GuideAspire: A comprehensive well-being program in English and Telugu for mental, physical, and time management skills.">
  <title>GuideAspire | Complete Well-Being Program</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
  <style>
    :root {
      --primary: #4f46e5;
      --secondary: #7c3aed;
      --accent: #f59e0b;
      --success: #10b981;
      --light: #f3f4f6;
      --dark: #1e293b;
      --gray: #6b7280;
      --bg-dark: #111827;
      --text-dark: #e2e8f0;
      --gradient: linear-gradient(135deg, #4f46e5, #7c3aed);
    }

    [data-theme="dark"] {
      --light: var(--bg-dark);
      --dark: var(--text-dark);
      --gray: #94a3b8;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: var(--light);
      color: var(--dark);
      line-height: 1.6;
      transition: background 0.3s, color 0.3s;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    /* Sticky Buttons */
    .button-container {
      position: sticky;
      top: 0;
      z-index: 1000;
      background: var(--light);
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .level-btn {
      padding: 12px 24px;
      background: var(--accent);
      color: var(--dark);
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      border: none;
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    .level-btn:hover {
      background: var(--secondary);
      color: white;
      transform: translateY(-2px);
    }

    .theme-toggle {
      padding: 10px;
      background: var(--primary);
      border: none;
      border-radius: 8px;
      cursor: pointer;
      color: white;
      font-size: 1.2rem;
      transition: all 0.3s;
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    .theme-toggle:hover {
      background: var(--accent);
      color: var(--dark);
      transform: translateY(-2px);
    }

    /* Language Dropdown */
    .language-dropdown {
      z-index: 1000;
    }

    .language-select {
      padding: 10px 20px;
      background: var(--light);
      border: 1px solid var(--gray);
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      color: var(--dark);
      appearance: none;
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="%236b7280" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>');
      background-repeat: no-repeat;
      background-position: right 10px center;
      padding-right: 30px;
    }

    .language-select:hover {
      background-color: var(--secondary);
      color: white;
      border-color: var(--secondary);
    }

    /* Header */
    .header {
      text-align: center;
      margin: 40px 0;
      padding: 20px;
      background: var(--gradient);
      border-radius: 15px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .header h1 {
      font-size: 2.8rem;
      color: white;
      margin-bottom: 10px;
    }

    .header p {
      color: #e2e8f0;
      font-size: 1.2rem;
    }

    /* Navigation */
    .category-btn {
      padding: 12px 24px;
      background: white;
      border: 1px solid var(--gray);
      border-radius: 30px;
      cursor: pointer;
      white-space: nowrap;
      transition: all 0.3s;
      font-weight: 600;
      position: relative;
      z-index: 101;
    }

    .category-btn:hover::before {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-bottom: 10px;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      padding: 8px 12px;
      border-radius: 5px;
      font-size: 0.9rem;
      white-space: nowrap;
      z-index: 3000;
      box-shadow: 0 4px 10px rgba(0,0,0,0.3);
      opacity: 1;
      pointer-events: none;
    }

    .category-btn::before {
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
    }

    .category-btn::after {
      content: '';
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-bottom: 4px;
      border: 6px solid transparent;
      border-top-color: rgba(0, 0, 0, 0.9);
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
      z-index: 3000;
    }

    .category-btn:hover::after {
      opacity: 1;
    }

    .category-btn.active {
      background: var(--gradient);
      color: white;
      border: none;
    }

    .categories {
      display: flex;
      flex-wrap: nowrap;
      gap: 10px;
      
      padding: 15px 0;
      margin-bottom: 30px;
      scrollbar-width: thin;
    }

    .days-nav {
      display: flex;
      gap: 10px;
      overflow-x: auto;
      padding: 15px 0;
      margin-bottom: 30px;
      scrollbar-width: thin;
    }

    .day-card {
      min-width: 120px;
      padding: 15px;
      background: white;
      border-radius: 10px;
      text-align: center;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .day-card.active {
      border: 2px solid var(--primary);
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .day-card:hover {
      transform: translateY(-3px);
    }

    .day-number {
      font-size: 1.3rem;
      font-weight: 700;
      margin-bottom: 5px;
      color: var(--primary);
    }

    .day-topic {
      font-size: 0.9rem;
      color: var(--gray);
    }

    /* Content Area */
    .content-area {
      background: white;
      border-radius: 15px;
      padding: 30px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      margin-bottom: 30px;
    }

    .day-title {
      font-size: 2rem;
      color: var(--primary);
      margin-bottom: 20px;
    }

    .topic-description {
      margin-bottom: 25px;
      line-height: 1.7;
      font-size: 1.1rem;
    }

    .subtopics {
      margin: 20px 0;
    }

    .subtopic {
      margin-bottom: 15px;
      padding: 15px;
      background: var(--light);
      border-radius: 8px;
      transition: transform 0.3s;
    }

    .subtopic:hover {
      transform: translateX(5px);
    }

    .subtopic h4 {
      color: var(--secondary);
      margin-bottom: 10px;
      font-size: 1.2rem;
    }

    /* Video Container */
    .video-container {
      position: relative;
      padding-bottom: 56.25%;
      margin: 25px 0;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .video-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: none;
    }

    /* Materials Section */
    .materials-section {
      margin: 30px 0;
    }

    .materials-title {
      font-size: 1.4rem;
      margin-bottom: 15px;
      color: var(--secondary);
    }

    .material-card {
      background: var(--light);
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
      transition: transform 0.3s;
    }

    .material-card:hover {
      transform: translateX(5px);
    }

    .material-icon {
      color: var(--primary);
      font-size: 1.2rem;
    }

    /* Action Buttons */
    .action-buttons {
      display: flex;
      gap: 15px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .btn {
      padding: 12px 25px;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      border: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: var(--gradient);
      color: white;
    }

    .btn-primary:hover {
      background: var(--secondary);
      transform: translateY(-2px);
    }

    .btn-secondary {
      background: var(--light);
      color: var(--dark);
    }

    .btn-secondary:hover {
      background: #e5e7eb;
    }

    /* Resources Grid */
    .resources-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 20px;
      margin-top: 30px;
    }

    .resource-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 3px 10px rgba(0,0,0,0.08);
      transition: all 0.3s;
    }

    .resource-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .resource-title {
      font-size: 1.2rem;
      margin-bottom: 10px;
      color: var(--primary);
    }

    /* Notes Modal */
    .notes-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .notes-modal-content {
      background: white;
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      position: relative;
    }

    .notes-modal textarea {
      width: 100%;
      min-height: 150px;
      margin-bottom: 15px;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid var(--gray);
    }

    .close-modal {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      font-size: 1.2rem;
      color: var(--gray);
    }

    /* Game Section */
    .game-section {
      margin: 40px 0;
      background: linear-gradient(145deg, #ffffff, #e5e7eb);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
      transition: transform 0.3s;
    }

    .game-section h3 {
      font-size: 2rem;
      color: var(--primary);
      margin-bottom: 30px;
      text-align: center;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .game-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
      margin-bottom: 30px;
    }

    .game-card {
      background: white;
      border-radius: 15px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      transition: transform 0.3s, box-shadow 0.3s, background 0.3s;
      position: relative;
      overflow: hidden;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .game-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      background: var(--gradient);
      color: white;
    }

    .game-card:hover h4, .game-card:hover p {
      color: white;
    }

    .game-card h4 {
      font-size: 1.5rem;
      margin-bottom: 15px;
      color: var(--secondary);
      transition: color 0.3s;
    }

    .game-card p {
      font-size: 1rem;
      color: var(--gray);
      transition: color 0.3s;
    }

    .game-card img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-bottom: 15px;
      transition: transform 0.3s;
    }

    .game-card:hover img {
      transform: scale(1.05);
    }

    .game-instructions-btn {
      position: absolute;
      top: 15px;
      right: 15px;
      background: var(--accent);
      color: var(--dark);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .game-instructions-btn:hover {
      background: var(--secondary);
      color: white;
      transform: rotate(360deg);
    }

    .game-container {
      display: none;
      margin-top: 30px;
      padding: 30px;
      background: white;
      border-radius: 15px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      animation: slideIn 0.5s ease forwards;
    }

    .game-container.active {
      display: block;
    }

    .chess-board {
      width: 100%;
      max-width: 500px;
      margin: 0 auto;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .sudoku-grid {
      display: grid;
      grid-template-columns: repeat(9, 50px);
      gap: 3px;
      background: #e5e7eb;
      padding: 10px;
      width: fit-content;
      margin: 20px auto;
      border: 3px solid var(--primary);
      border-radius: 10px;
    }

    .sudoku-cell {
      width: 50px;
      height: 50px;
      border: 1px solid #9ca3af;
      text-align: center;
      font-size: 1.4rem;
      background: white;
      transition: background 0.3s;
    }

    .sudoku-cell input {
      width: 100%;
      height: 100%;
      border: none;
      text-align: center;
      font-size: 1.4rem;
      background: transparent;
    }

    .sudoku-cell input.error {
      background: #fee2e2;
      animation: shake 0.3s;
    }

    .memory-game {
      display: grid;
      grid-template-columns: repeat(4, 100px);
      gap: 15px;
      width: fit-content;
      margin: 20px auto;
    }

    .memory-card {
      width: 100px;
      height: 100px;
      background: var(--primary);
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.5s, background 0.3s;
      position: relative;
      transform-style: preserve-3d;
    }

    .memory-card.flipped {
      background: white !important;
      transform: rotateY(180deg);
    }

    .memory-card img {
      width: 80px;
      height: 80px;
      display: none;
      transform: rotateY(180deg);
    }

    .memory-card.flipped img {
      display: block;
    }

    .tictactoe-grid {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 5px;
      width: fit-content;
      margin: 20px auto;
      background: #e5e7eb;
      padding: 10px;
      border-radius: 10px;
    }

    .tictactoe-cell {
      width: 100px;
      height: 100px;
      background: white;
      border: 2px solid var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5rem;
      cursor: pointer;
      transition: background 0.3s;
    }

    .tictactoe-cell:hover {
      background: #f3f4f6;
    }

    .game-2048 {
      width: 400px;
      height: 400px;
      background: #bbada0;
      border-radius: 10px;
      padding: 10px;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      margin: 20px auto;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .tile {
      background: #cdc1b4;
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      font-weight: 700;
      color: #776e65;
      transition: transform 0.2s, background 0.2s;
    }

    .tile[data-value="2"] { background: #eee4da; }
    .tile[data-value="4"] { background: #ede0c8; }
    .tile[data-value="8"] { background: #f2b179; color: white; }
    .tile[data-value="16"] { background: #f59563; color: white; }
    .tile[data-value="32"] { background: #f67c5f; color: white; }
    .tile[data-value="64"] { background: #f65e3b; color: white; }
    .tile[data-value="128"] { background: #edcf72; color: white; }
    .tile[data-value="256"] { background: #edcc61; color: white; }
    .tile[data-value="512"] { background: #edc850; color: white; }
    .tile[data-value="1024"] { background: #edc53f; color: white; }
    .tile[data-value="2048"] { background: #edc22e; color: white; }

    .game-controls {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 20px;
      flex-wrap: wrap;
    }

    .game-controls select {
      padding: 10px;
      border-radius: 8px;
      border: 1px solid var(--gray);
      background: var(--light);
      cursor: pointer;
      font-size: 1rem;
    }

    .game-controls select:hover {
      background: var(--secondary);
      color: white;
      border-color: var(--secondary);
    }

    /* Instructions Modal */
    .instructions-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .instructions-modal-content {
      background: white;
      padding: 30px;
      border-radius: 15px;
      width: 90%;
      max-width: 700px;
      position: relative;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
    }

    /* Animations */
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-5px); }
      75% { transform: translateX(5px); }
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .container {
        padding: 15px;
      }

      .header h1 {
        font-size: 2.2rem;
      }

      .chess-board {
        max-width: 400px;
      }

      .sudoku-grid {
        grid-template-columns: repeat(9, 40px);
      }

      .sudoku-cell {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
      }

      .memory-game {
        grid-template-columns: repeat(4, 80px);
      }

      .memory-card {
        width: 80px;
        height: 80px;
      }

      .memory-card img {
        width: 60px;
        height: 60px;
      }

      .tictactoe-grid {
        grid-template-columns: repeat(3, 80px);
      }

      .tictactoe-cell {
        width: 80px;
        height: 80px;
        font-size: 2rem;
      }

      .game-2048 {
        width: 320px;
        height: 320px;
      }
    }

    @media (max-width: 768px) {
      .game-section {
        padding: 20px;
      }

      .game-grid {
        grid-template-columns: 1fr;
      }

      .game-card img {
        height: 150px;
      }

      .chess-board {
        max-width: 350px;
      }

      .sudoku-grid {
        grid-template-columns: repeat(9, 35px);
      }

      .sudoku-cell {
        width: 35px;
        height: 35px;
        font-size: 1rem;
      }

      .memory-game {
        grid-template-columns: repeat(4, 70px);
      }

      .memory-card {
        width: 70px;
        height: 70px;
      }

      .memory-card img {
        width: 50px;
        height: 50px;
      }

      .tictactoe-grid {
        grid-template-columns: repeat(3, 70px);
      }

      .tictactoe-cell {
        width: 70px;
        height: 70px;
        font-size: 1.8rem;
      }

      .game-2048 {
        width: 280px;
        height: 280px;
      }

      .button-container {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }

      .categories {
        flex-wrap: wrap;
      }
    }

    @media (max-width: 480px) {
      .level-btn, .theme-toggle {
        padding: 8px;
        font-size: 0.9rem;
      }

      .header h1 {
        font-size: 1.8rem;
      }

      .category-btn {
        padding: 10px 15px;
        font-size: 0.9rem;
      }

      .day-card {
        min-width: 100px;
        padding: 10px;
      }

      .chess-board {
        max-width: 280px;
      }

      .sudoku-grid {
        grid-template-columns: repeat(9, 30px);
      }

      .sudoku-cell {
        width: 30px;
        height: 30px;
        font-size: 0.9rem;
      }

      .memory-game {
        grid-template-columns: repeat(4, 60px);
      }

      .memory-card {
        width: 60px;
        height: 60px;
      }

      .memory-card img {
        width: 40px;
        height: 40px;
      }

      .tictactoe-grid {
        grid-template-columns: repeat(3, 60px);
      }

      .tictactoe-cell {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
      }

      .game-2048 {
        width: 240px;
        height: 240px;
      }
    }

    /* Leaderboard Section */
    .leaderboard-section {
      margin: 40px 0;
      background: linear-gradient(145deg, #ffffff, #e5e7eb);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
      transition: transform 0.3s;
    }

    .leaderboard-section h3 {
      font-size: 2rem;
      color: var(--primary);
      margin-bottom: 30px;
      text-align: center;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .leaderboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
      margin-bottom: 30px;
    }

    .leaderboard-card {
      background: white;
      border-radius: 15px;
      padding: 20px;
      text-align: center;
      transition: transform 0.3s, box-shadow 0.3s;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .leaderboard-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .leaderboard-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }

    .leaderboard-table th, .leaderboard-table td {
      padding: 10px;
      border-bottom: 1px solid #e5e7eb;
      font-size: 1rem;
      color: var(--dark);
    }

    .leaderboard-table th {
      background: var(--primary);
      color: white;
      font-weight: 600;
    }

    .leaderboard-table tbody tr:hover {
      background: #f3f4f6;
    }

    /* Competition Section */
    .competition-section {
      margin: 40px 0;
      background: linear-gradient(145deg, #ffffff, #e5e7eb);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
      transition: transform 0.3s;
    }

    .competition-section h3 {
      font-size: 2rem;
      color: var(--primary);
      margin-bottom: 30px;
      text-align: center;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .competition-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
      margin-bottom: 30px;
    }

    .competition-card {
      background: white;
      border-radius: 15px;
      padding: 20px;
      text-align: center;
      transition: transform 0.3s, box-shadow 0.3s;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      position: relative;
      overflow: hidden;
    }

    .competition-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      background: var(--gradient);
      color: white;
    }

    .competition-card:hover h4, .competition-card:hover p {
      color: white;
    }

    .competition-card h4 {
      font-size: 1.5rem;
      margin-bottom: 15px;
      color: var(--secondary);
      transition: color 0.3s;
    }

    .competition-card p {
      font-size: 1rem;
      color: var(--gray);
      transition: color 0.3s;
    }

    .competition-card .status-badge {
      position: absolute;
      top: 15px;
      right: 15px;
      background: var(--accent);
      color: var(--dark);
      padding: 5px 10px;
      border-radius: 12px;
      font-size: 0.9rem;
      font-weight: 600;
    }

    .competition-card .join-btn {
      margin-top: 15px;
      background: var(--primary);
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }

    .competition-card .join-btn:hover {
      background: var(--secondary);
      transform: translateY(-2px);
    }

    .competition-leaderboard {
      margin-top: 20px;
      display: none;
    }

    .competition-leaderboard.active {
      display: block;
    }

    .competition-leaderboard table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }

    .competition-leaderboard th, .competition-leaderboard td {
      padding: 8px;
      border-bottom: 1px solid #e5e7eb;
      font-size: 0.9rem;
      color: var(--dark);
    }

    .competition-leaderboard th {
      background: var(--primary);
      color: white;
      font-weight: 600;
    }

    /* Login Modal */
    .login-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .login-modal .notes-modal-content {
      text-align: center;
    }

    /* Example custom tweak: glowing border on carousel focus */
#gamesCarousel:focus-within .group {
  border: 2px solid #a78bfa !important;
}
#gameOverlay {
  animation: fadeIn .18s;
}
@keyframes fadeIn {
  from { opacity: 0; }
  to   { opacity: 1; }
}
/* carousel shadow on scroll */
#gamesCarousel::-webkit-scrollbar { height: 7px; }
#gamesCarousel::-webkit-scrollbar-thumb { background: #cebafc; border-radius: 10px; }

  </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900">
  <!-- Sticky Button Container -->
  <div class="button-container">
    <button class="level-btn" onclick="window.location.href='/CourseSelect.htm'" aria-label="Go to level section">
      Go to Level Section
    </button>
    <div class="language-dropdown">
      <select class="language-select" aria-label="Select language">
        <option value="english" selected>English</option>
        <option value="telugu">Telugu</option>
      </select>
    </div>
    <button class="theme-toggle" aria-label="Toggle dark mode">
      <i class="fas fa-moon"></i>
    </button>
  </div>

  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <header class="header">
      <h1 class="text-4xl md:text-5xl">Mental & Physical Well-Being Program</h1>
      <p class="text-lg md:text-xl">Your guided journey to better health and productivity</p>
    </header>

    <!-- Categories Navigation -->
    <nav class="categories flex gap-4 mb-8" role="navigation" aria-label="Program categories">
      <button class="category-btn active" data-category="all" data-tooltip="View all days" aria-selected="true">All</button>
      <button class="category-btn" data-category="mental" data-tooltip="Mental health focus" aria-selected="false">Mental Well-Being</button>
      <button class="category-btn" data-category="physical" data-tooltip="Physical health focus" aria-selected="false">Physical Well-Being</button>
      <button class="category-btn" data-category="time" data-tooltip="Productivity skills" aria-selected="false">Time Management</button>
      <button class="category-btn" data-category="activities" data-tooltip="Creative tasks" aria-selected="false">Interactive Activities</button>
      <button class="category-btn" data-category="games" data-tooltip="Mind-enhancing games" aria-selected="false">Games</button>
      <button class="category-btn" data-category="leaderboards" data-tooltip="View game leaderboards" aria-selected="false">Leaderboards</button>
      <button class="category-btn" data-category="competitions" data-tooltip="Join monthly competitions" aria-selected="false">Competitions</button>
    </nav>

    <!-- Days Navigation -->
    <nav class="days-nav" id="daysNav" role="navigation" aria-label="Program days"></nav>

    <!-- Main Content Area -->
    <main class="content-area fade-in" role="main" id="mainContent">
      <h2 class="day-title" id="dayTitle"></h2>
      <div class="topic-description" id="topicDescription"></div>
      <div class="subtopics" id="subtopics"></div>
      <div class="video-container" id="videoContainer">
        <iframe id="videoFrame" loading="lazy" allowfullscreen></iframe>
      </div>
      <div class="materials-section" id="materialsSection">
        <h3 class="materials-title">Today's Materials</h3>
        <div id="materialsList"></div>
      </div>
      <div class="action-buttons">
        <button class="btn btn-secondary" id="notesBtn" aria-label="Add notes">
          <i class="fas fa-edit"></i> Add Notes
        </button>
        <button class="btn btn-secondary" id="resourcesBtn" aria-label="View resources">
          <i class="fas fa-book"></i> Resources
        </button>
      </div>
      <div class="resources-grid" id="resourcesGrid" style="display: none;"></div>
    </main>

    <!-- Games Section -->
    <section class="game-section" id="gameSection" style="display: none;">
      <h3 class="text-3xl md:text-4xl">Mind-Enhancing Games</h3>
      <div class="game-grid" id="gameGrid">
        <div class="game-card" data-game="chess">
          <img src="https://images.pexels.com/photos/260024/pexels-photo-260024.jpeg" alt="Chess Board" class="w-full h-48 object-cover">
          <h4>Chess</h4>
          <p>Sharpen your strategy with a classic game of chess.</p>
          <button class="game-instructions-btn" data-game="chess" aria-label="Chess instructions"><i class="fas fa-info"></i></button>
        </div>
        <div class="game-card" data-game="sudoku">
          <img src="https://images.pexels.com/photos/392018/pexels-photo-392018.jpeg" alt="Sudoku Puzzle" class="w-full h-48 object-cover">
          <h4>Sudoku</h4>
          <p>Challenge your logic with this number puzzle.</p>
          <button class="game-instructions-btn" data-game="sudoku" aria-label="Sudoku instructions"><i class="fas fa-info"></i></button>
        </div>
        <div class="game-card" data-game="memory">
          <img src="https://images.pexels.com/photos/6143196/pexels-photo-6143196.jpeg" alt="Memory Match Cards" class="w-full h-48 object-cover">
          <h4>Memory Match</h4>
          <p>Test your memory with this fun card-matching game.</p>
          <button class="game-instructions-btn" data-game="memory" aria-label="Memory Match instructions"><i class="fas fa-info"></i></button>
        </div>
        <div class="game-card" data-game="tictactoe">
          <img src="https://images.pexels.com/photos/159888/pexels-photo-159888.jpeg" alt="Tic-Tac-Toe Grid" class="w-full h-48 object-cover">
          <h4>Tic-Tac-Toe</h4>
          <p>Play this classic game against an AI opponent.</p>
          <button class="game-instructions-btn" data-game="tictactoe" aria-label="Tic-Tac-Toe instructions"><i class="fas fa-info"></i></button>
        </div>
        <div class="game-card" data-game="2048">
          <img src="https://images.pexels.com/photos/577585/pexels-photo-577585.jpeg" alt="2048 Tile Puzzle" class="w-full h-48 object-cover">
          <h4>2048</h4>
          <p>Slide tiles to combine numbers and reach 2048.</p>
          <button class="game-instructions-btn" data-game="2048" aria-label="2048 instructions"><i class="fas fa-info"></i></button>
        </div>
      </div>
      <div class="game-container" id="chessGame">
        <div id="chessBoard" class="chess-board"></div>
        <div class="game-controls">
          <select id="chessMode">
            <option value="ai">Play vs AI</option>
            <option value="online">Play Online</option>
          </select>
          <select id="chessDifficulty" class="ml-2">
            <option value="1">Beginner</option>
            <option value="5">Intermediate</option>
            <option value="10">Advanced</option>
          </select>
          <button class="btn btn-primary ml-2" id="resetChess">New Game</button>
        </div>
      </div>
      <div class="game-container" id="sudokuGame">
        <div class="game-controls">
          <select id="sudokuDifficulty">
            <option value="30">Easy</option>
            <option value="40">Medium</option>
            <option value="50">Hard</option>
          </select>
          <button class="btn btn-primary ml-2" id="resetSudoku">New Game</button>
          <button class="btn btn-secondary ml-2" id="checkSudoku">Check Solution</button>
        </div>
        <div class="sudoku-grid" id="sudokuGrid"></div>
      </div>
      <div class="game-container" id="memoryGame">
        <div class="game-controls">
          <button class="btn btn-primary" id="resetMemory">New Game</button>
        </div>
        <div class="memory-game" id="memoryGrid"></div>
      </div>
      <div class="game-container" id="tictactoeGame">
        <div class="game-controls">
          <select id="tictactoeDifficulty">
            <option value="easy">Easy</option>
            <option value="hard">Hard</option>
          </select>
          <button class="btn btn-primary ml-2" id="resetTictactoe">New Game</button>
        </div>
        <div class="tictactoe-grid" id="tictactoeGrid"></div>
      </div>
      <div class="game-container" id="2048Game">
        <div class="game-controls">
          <button class="btn btn-primary" id="reset2048">New Game</button>
        </div>
        <div class="game-2048" id="game2048"></div>
      </div>
    </section>

    <!-- Leaderboards Section -->
    <section class="leaderboard-section" id="leaderboardSection" style="display: none;">
      <h3 class="text-3xl md:text-4xl">Game Leaderboards</h3>
      <div class="leaderboard-grid" id="leaderboardGrid">
        <div class="leaderboard-card" data-game="chess">
          <h4>Chess Leaderboard</h4>
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Score</th>
              </tr>
            </thead>
            <tbody id="chessLeaderboard"></tbody>
          </table>
        </div>
        <div class="leaderboard-card" data-game="sudoku">
          <h4>Sudoku Leaderboard</h4>
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Score</th>
              </tr>
            </thead>
            <tbody id="sudokuLeaderboard"></tbody>
          </table>
        </div>
        <div class="leaderboard-card" data-game="memory">
          <h4>Memory Match Leaderboard</h4>
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Score</th>
              </tr>
            </thead>
            <tbody id="memoryLeaderboard"></tbody>
          </table>
        </div>
        <div class="leaderboard-card" data-game="tictactoe">
          <h4>Tic-Tac-Toe Leaderboard</h4>
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Score</th>
              </tr>
            </thead>
            <tbody id="tictactoeLeaderboard"></tbody>
          </table>
        </div>
        <div class="leaderboard-card" data-game="2048">
          <h4>2048 Leaderboard</h4>
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Score</th>
              </tr>
            </thead>
            <tbody id="2048Leaderboard"></tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- Competitions Section -->
    <section class="competition-section" id="competitionSection" style="display: none;">
      <h3 class="text-3xl md:text-4xl">Monthly Game Competitions</h3>
      <div class="competition-grid" id="competitionGrid"></div>
    </section>
  </div>

  <!-- Notes Modal -->
  <div class="notes-modal" id="notesModal">
    <div class="notes-modal-content">
      <span class="close-modal" aria-label="Close notes modal">×</span>
      <h3>Notes for Day <span id="notesDay"></span></h3>
      <textarea id="notesInput" placeholder="Write your notes here..."></textarea>
      <button class="btn btn-primary" id="saveNotesBtn">Save Notes</button>
    </div>
  </div>

  <!-- Instructions Modal -->
  <div class="instructions-modal" id="instructionsModal">
    <div class="instructions-modal-content">
      <span class="close-modal" aria-label="Close instructions modal">×</span>
      <div id="instructionsContent"></div>
    </div>
  </div>

  <!-- Login Prompt Modal -->
  <div class="login-modal" id="loginModal" style="display: none;">
    <div class="notes-modal-content">
      <span class="close-modal" aria-label="Close login modal">×</span>
      <h3>Please Log In</h3>
      <p>You need to be logged in to participate in games, leaderboards, or competitions.</p>
      <button class="btn btn-primary" onclick="window.location.href='/login'">Go to Login</button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chess.js@0.12.0/chess.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Program Data
      const programData = {
        categories: {
          mental: { title: 'Mental Well-Being', color: '#4f46e5' },
          physical: { title: 'Physical Well-Being', color: '#7c3aed' },
          time: { title: 'Time Management', color: '#f59e0b' },
          activities: { title: 'Interactive Activities', color: '#10b981' },
          games: { title: 'Games', color: '#10b981' },
          leaderboards: { title: 'Leaderboards', color: '#10b981' },
          competitions: { title: 'Competitions', color: '#10b981' }
        },
        days: [
          {
            id: 1,
            category: 'mental',
            title: 'Building Self-Confidence',
            description: 'Learn to identify and challenge negative self-talk through practical exercises and mindset shifts.',
            subtopics: [
              { title: 'Identifying Negative Patterns', description: 'Understand how negative self-talk affects your confidence.' },
              { title: 'Positive Affirmations', description: 'Practice affirmations to build a positive mindset.' },
              { title: 'Goal Setting', description: 'Set small, achievable goals to boost confidence.' }
            ],
            videos: {
              english: 'm0EsYiSGTSc',
              telugu: 'PLACEHOLDER_TELUGU_1'
            },
            materials: [
              { type: 'pdf', title: 'Self-Confidence Worksheet', url: '#' },
              { type: 'link', title: 'Psychology Today: Confidence', url: 'https://www.psychologytoday.com' }
            ],
            resources: [
              { title: 'Confidence Journal Template', description: 'Printable template for daily tracking', url: '#' }
            ]
          },
          {
            id: 2,
            category: 'mental',
            title: 'Managing Stress',
            description: 'Explore techniques to manage stress effectively and maintain mental clarity.',
            subtopics: [
              { title: 'Breathing Exercises', description: 'Learn diaphragmatic breathing to reduce stress.' },
              { title: 'Mindfulness Meditation', description: 'Practice mindfulness to stay present.' }
            ],
            videos: {
              english: '0fL-pn80s-c',
              telugu: 'PLACEHOLDER_TELUGU_2'
            },
            materials: [
              { type: 'pdf', title: 'Stress Management Guide', url: '#' }
            ],
            resources: [
              { title: 'Mindfulness Tracker', description: 'Track your meditation progress', url: '#' }
            ]
          },
          {
            id: 3,
            category: 'physical',
            title: 'Managing Stress',
            description: 'Explore techniques to manage stress effectively and maintain mental clarity.',
            subtopics: [
              { title: 'Breathing Exercises', description: 'Learn diaphragmatic breathing to reduce stress.' },
              { title: 'Mindfulness Meditation', description: 'Practice mindfulness to stay present.' }
            ],
            videos: {
              english: '0fL-pn80s-c',
              telugu: 'PLACEHOLDER_TELUGU_2'
            },
            materials: [
              { type: 'pdf', title: 'Stress Management Guide', url: '#' }
            ],
            resources: [
              { title: 'Mindfulness Tracker', description: 'Track your meditation progress', url: '#' }
            ]
          },
          {
            id: 4,
            category: 'physical',
            title: 'Managing Stress',
            description: 'Explore techniques to manage stress effectively and maintain mental clarity.',
            subtopics: [
              { title: 'Breathing Exercises', description: 'Learn diaphragmatic breathing to reduce stress.' },
              { title: 'Mindfulness Meditation', description: 'Practice mindfulness to stay present.' }
            ],
            videos: {
              english: '0fL-pn80s-c',
              telugu: 'PLACEHOLDER_TELUGU_2'
            },
            materials: [
              { type: 'pdf', title: 'Stress Management Guide', url: '#' }
            ],
            resources: [
              { title: 'Mindfulness Tracker', description: 'Track your meditation progress', url: '#' }
            ]
          }
        ]
      };

      // Game Instructions
      const gameInstructions = {
        chess: `
          <h3>Chess Instructions</h3>
          <p>Chess is a strategic board game for two players.</p>
          <ul>
            <li><strong>Objective</strong>: Checkmate your opponent's king.</li>
            <li><strong>Gameplay</strong>: Drag pieces to move against an AI or online opponent.</li>
            <li><strong>Modes</strong>: Play vs AI or Online (matchmaking).</li>
            <li><strong>Difficulty</strong>: Select Beginner, Intermediate, or Advanced for AI.</li>
            <li><strong>Controls</strong>: Choose mode/difficulty and click "New Game" to reset.</li>
            <li><strong>Tips</strong>: Control the center and protect your king.</li>
          </ul>
        `,
        sudoku: `
          <h3>Sudoku Instructions</h3>
          <p>Sudoku is a logic-based number puzzle.</p>
          <ul>
            <li><strong>Objective</strong>: Fill the 9x9 grid with numbers 1-9, ensuring no repeats in rows, columns, or 3x3 subgrids.</li>
            <li><strong>Gameplay</strong>: Enter numbers in empty cells. Errors are highlighted.</li>
            <li><strong>Difficulty</strong>: Choose Easy, Medium, or Hard.</li>
            <li><strong>Controls</strong>: Select difficulty, click "New Game," or "Check Solution."</li>
            <li><strong>Tips</strong>: Start with obvious numbers and work systematically.</li>
          </ul>
        `,
        memory: `
          <h3>Memory Match Instructions</h3>
          <p>Memory Match tests your memory with card pairs.</p>
          <ul>
            <li><strong>Objective</strong>: Match all card pairs in the fewest moves.</li>
            <li><strong>Gameplay</strong>: Flip two cards at a time to find matches.</li>
            <li><strong>Controls</strong>: Click "New Game" to shuffle cards.</li>
            <li><strong>Tips</strong>: Memorize card positions to minimize flips.</li>
          </ul>
        `,
        tictactoe: `
          <h3>Tic-Tac-Toe Instructions</h3>
          <p>Tic-Tac-Toe is a classic two-player game on a 3x3 grid.</p>
          <ul>
            <li><strong>Objective</strong>: Get three of your symbols (X) in a row, column, or diagonal.</li>
            <li><strong>Gameplay</strong>: Click a cell to place X; AI plays O.</li>
            <li><strong>Difficulty</strong>: Choose Easy or Hard.</li>
            <li><strong>Controls</strong>: Select difficulty and click "New Game" to reset.</li>
            <li><strong>Tips</strong>: Block AI's winning moves and aim for the center.</li>
          </ul>
        `,
        '2048': `
          <h3>2048 Instructions</h3>
          <p>2048 is a sliding tile puzzle game.</p>
          <ul>
            <li><strong>Objective</strong>: Combine tiles to reach the 2048 tile.</li>
            <li><strong>Gameplay</strong>: Use arrow keys to slide tiles. Matching tiles combine.</li>
            <li><strong>Controls</strong>: Click "New Game" to reset.</li>
            <li><strong>Tips</strong>: Keep larger tiles in a corner and plan moves ahead.</li>
          </ul>
        `
      };

      // DOM Elements
      const daysNav = document.getElementById('daysNav');
      const dayTitle = document.getElementById('dayTitle');
      const topicDescription = document.getElementById('topicDescription');
      const subtopicsContainer = document.getElementById('subtopics');
      const videoFrame = document.getElementById('videoFrame');
      const materialsList = document.getElementById('materialsList');
      const notesBtn = document.getElementById('notesBtn');
      const resourcesBtn = document.getElementById('resourcesBtn');
      const resourcesGrid = document.getElementById('resourcesGrid');
      const notesModal = document.getElementById('notesModal');
      const notesInput = document.getElementById('notesInput');
      const notesDay = document.getElementById('notesDay');
      const saveNotesBtn = document.getElementById('saveNotesBtn');
      const closeModal = document.querySelector('.notes-modal .close-modal');
      const themeToggle = document.querySelector('.theme-toggle');
      const languageSelect = document.querySelector('.language-select');
      const mainContent = document.getElementById('mainContent');
      const gameSection = document.getElementById('gameSection');
      const leaderboardSection = document.getElementById('leaderboardSection');
      const competitionSection = document.getElementById('competitionSection');
      const gameCards = document.querySelectorAll('.game-card');
      const chessBoardEl = document.getElementById('chessBoard');
      const sudokuGrid = document.getElementById('sudokuGrid');
      const resetSudokuBtn = document.getElementById('resetSudoku');
      const checkSudokuBtn = document.getElementById('checkSudoku');
      const resetChessBtn = document.getElementById('resetChess');
      const chessDifficulty = document.getElementById('chessDifficulty');
      const chessMode = document.getElementById('chessMode');
      const sudokuDifficulty = document.getElementById('sudokuDifficulty');
      const memoryGrid = document.getElementById('memoryGrid');
      const resetMemoryBtn = document.getElementById('resetMemory');
      const tictactoeGrid = document.getElementById('tictactoeGrid');
      const resetTictactoeBtn = document.getElementById('resetTictactoe');
      const tictactoeDifficulty = document.getElementById('tictactoeDifficulty');
      const game2048 = document.getElementById('game2048');
      const reset2048Btn = document.getElementById('reset2048');
      const instructionsModal = document.getElementById('instructionsModal');
      const instructionsContent = document.getElementById('instructionsContent');
      const instructionsClose = document.querySelector('.instructions-modal .close-modal');
      const loginModal = document.getElementById('loginModal');
      const loginModalClose = document.querySelector('.login-modal .close-modal');
      const competitionGrid = document.getElementById('competitionGrid');

      // State
      let currentDay = 1;
      let currentLanguage = 'english';
      let userNotes = JSON.parse(localStorage.getItem('userNotes')) || {};
      let currentCategory = 'all';
      let chessGame, chessBoard;
      let sudokuBoard, solutionBoard;
      let memoryCards = [];
      let tictactoeBoard = Array(9).fill('');
      let currentPlayer = 'X';
      let game2048Board = Array(4).fill().map(() => Array(4).fill(0));
      let game2048Score = 0;
      let currentUser = null;
      let activeCompetitions = [];

      // Mock Leaderboard Storage
      let leaderboards = JSON.parse(localStorage.getItem('leaderboards')) || {
        chess: [],
        sudoku: [],
        memory: [],
        tictactoe: [],
        '2048': []
      };

      // User Authentication
      async function checkUser() {
        try {
          const response = await fetch('/api/profile/' + encodeURIComponent(localStorage.getItem('userEmail') || ''));
          if (response.ok) {
            currentUser = await response.json();
          } else {
            currentUser = null;
            localStorage.removeItem('userEmail');
          }
        } catch (err) {
          console.error('User check error:', err);
          currentUser = null;
        }
      }

      async function requireLogin() {
        if (!currentUser) {
          loginModal.style.display = 'flex';
          return false;
        }
        return true;
      }

      loginModalClose.addEventListener('click', () => {
        loginModal.style.display = 'none';
      });

      // Submit Game Result
// Submit Game Result
async function submitGameResult(game, score) {
  if (!currentUser) return;
  try {
    // Define score adjustments
    const scoreAdjustment = score === 100 ? 100 : score === 50 ? 50 : -50;

    // Find existing user entry
    const existingEntryIndex = leaderboards[game].findIndex(entry => entry.email === currentUser.email);

    if (existingEntryIndex !== -1) {
      // Update existing score
      leaderboards[game][existingEntryIndex].score = Math.max(
        0,
        (leaderboards[game][existingEntryIndex].score || 0) + scoreAdjustment
      );
      leaderboards[game][existingEntryIndex].timestamp = new Date().toISOString();
    } else {
      // Create new entry
      leaderboards[game].push({
        email: currentUser.email,
        name: currentUser.name || 'Anonymous',
        score: Math.max(0, scoreAdjustment),
        timestamp: new Date().toISOString()
      });
    }

    // Sort by score (descending) and limit to top 5
    leaderboards[game].sort((a, b) => b.score - a.score);
    leaderboards[game] = leaderboards[game].slice(0, 5);

    // Save to localStorage
    localStorage.setItem('leaderboards', JSON.stringify(leaderboards));

    // Update leaderboard display
    renderLeaderboards();

    // Submit to server (mock)
    const response = await fetch('/game-result', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: currentUser.email, game, score: leaderboards[game].find(entry => entry.email === currentUser.email).score })
    });
    if (!response.ok) throw new Error('Failed to submit game result');
  } catch (err) {
    console.error('Submit game result error:', err);
  }
}

      // Submit Competition Result
      async function submitCompetitionResult(competitionId, score) {
        if (!currentUser) return;
        try {
          const response = await fetch('/competition-result', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: currentUser.email, competition_id: competitionId, score })
          });
          if (!response.ok) throw new Error('Failed to submit competition result');
          renderCompetitions();
        } catch (err) {
          console.error('Submit competition result error:', err);
        }
      }

      // Check Competition Result
      function checkCompetitionResult(game, score) {
        const competition = activeCompetitions.find(c => c.game === game && new Date(c.end_date) > new Date());
        if (competition) {
          submitCompetitionResult(competition.id, score);
        }
      }

      // Render Days Navigation
      function renderDays() {
        daysNav.innerHTML = '';
        programData.days.forEach(day => {
          if (currentCategory === 'all' || day.category === currentCategory) {
            const dayCard = document.createElement('div');
            dayCard.className = `day-card ${day.id === currentDay ? 'active' : ''}`;
            dayCard.dataset.day = day.id;
            dayCard.innerHTML = `
              <div class="day-number">Day ${day.id}</div>
              <div class="day-topic">${day.title}</div>
            `;
            dayCard.addEventListener('click', () => {
              currentDay = day.id;
              renderContent();
              document.querySelectorAll('.day-card').forEach(card => card.classList.remove('active'));
              dayCard.classList.add('active');
            });
            daysNav.appendChild(dayCard);
          }
        });
      }

      // Render Main Content
      function renderContent() {
        const day = programData.days.find(d => d.id === currentDay);
        if (!day) return;

        dayTitle.textContent = `Day ${day.id}: ${day.title}`;
        topicDescription.textContent = day.description;

        subtopicsContainer.innerHTML = day.subtopics.map(sub => `
          <div class="subtopic">
            <h4>${sub.title}</h4>
            <p>${sub.description}</p>
          </div>
        `).join('');

        videoFrame.src = `https://www.youtube.com/embed/${day.videos[currentLanguage]}`;

        materialsList.innerHTML = day.materials.map(mat => `
          <div class="material-card">
            <i class="fas fa-${mat.type === 'pdf' ? 'file-pdf' : 'link'} material-icon"></i>
            <a href="${mat.url}" target="_blank">${mat.title}</a>
          </div>
        `).join('');

        resourcesGrid.innerHTML = day.resources.map(res => `
          <div class="resource-card">
            <h4 class="resource-title">${res.title}</h4>
            <p>${res.description}</p>
            <a href="${res.url}" target="_blank" class="btn btn-primary">Access</a>
          </div>
        `).join('');

        notesDay.textContent = day.id;
        notesInput.value = userNotes[day.id] || '';
      }

      // Toggle Category
      // Inside the category button event listener
document.querySelectorAll('.category-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    currentCategory = btn.dataset.category;
    document.querySelectorAll('.category-btn').forEach(b => {
      b.classList.remove('active');
      b.setAttribute('aria-selected', 'false');
    });
    btn.classList.add('active');
    btn.setAttribute('aria-selected', 'true');

    // Toggle section visibility
    mainContent.style.display = ['games', 'leaderboards', 'competitions'].includes(currentCategory) ? 'none' : 'block';
    gameSection.style.display = currentCategory === 'games' ? 'block' : 'none';
    leaderboardSection.style.display = currentCategory === 'leaderboards' ? 'block' : 'none';
    competitionSection.style.display = currentCategory === 'competitions' ? 'block' : 'none';

    // Reset game containers when switching away from games
    if (currentCategory !== 'games') {
      document.querySelectorAll('.game-container').forEach(container => {
        container.classList.remove('active');
      });
    }

    renderDays();
    currentDay = programData.days.find(d => currentCategory === 'all' || d.category === currentCategory)?.id || 1;
    renderContent();
  });
});

      // Theme Toggle
      themeToggle.addEventListener('click', () => {
        document.body.dataset.theme = document.body.dataset.theme === 'dark' ? 'light' : 'dark';
        themeToggle.innerHTML = `<i class="fas fa-${document.body.dataset.theme === 'dark' ? 'sun' : 'moon'}"></i>`;
        document.body.classList.toggle('bg-gray-100');
        document.body.classList.toggle('dark:bg-gray-900');
      });

      // Language Switch
      languageSelect.addEventListener('change', (e) => {
        currentLanguage = e.target.value;
        renderContent();
      });

      // Notes Modal
      notesBtn.addEventListener('click', () => {
        notesModal.style.display = 'flex';
      });

      closeModal.addEventListener('click', () => {
        notesModal.style.display = 'none';
      });

      saveNotesBtn.addEventListener('click', () => {
        userNotes[currentDay] = notesInput.value;
        localStorage.setItem('userNotes', JSON.stringify(userNotes));
        notesModal.style.display = 'none';
      });

      // Resources Toggle
      resourcesBtn.addEventListener('click', () => {
        resourcesGrid.style.display = resourcesGrid.style.display === 'none' ? 'grid' : 'none';
      });

      // Game Selection
gameCards.forEach(card => {
  card.addEventListener('click', async (e) => {
    e.preventDefault(); // Prevent any default behavior
    try {
      if (await requireLogin()) {
        const game = card.dataset.game;
        if (!game) {
          console.error('Game dataset not found on card:', card);
          return;
        }
        // Hide all game containers
        document.querySelectorAll('.game-container').forEach(container => {
          container.classList.remove('active');
        });
        // Show selected game container
        const gameContainer = document.getElementById(`${game}Game`);
        if (gameContainer) {
          gameContainer.classList.add('active');
          if (game === 'chess' && chessMode.value === 'online') {
            findOnlineOpponent();
          }
        } else {
          console.error(`Game container for ${game} not found`);
        }
      }
    } catch (err) {
      console.error('Error opening game:', err);
      alert('Failed to open game. Please try again.');
    }
  });
});

      // Instructions Modal
      document.querySelectorAll('.game-instructions-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          instructionsContent.innerHTML = gameInstructions[btn.dataset.game];
          instructionsModal.style.display = 'flex';
        });
      });

      instructionsClose.addEventListener('click', () => {
        instructionsModal.style.display = 'none';
      });

      // Chess Game
      function initChess() {
  try {
    if (typeof Chessboard === 'undefined' || typeof Chess === 'undefined') {
      console.warn('Chess libraries not loaded. Attempting to retry after delay.');
      setTimeout(initChess, 1000); // Retry after 1 second
      return;
    }
    chessGame = new Chess();
    const config = {
      draggable: true,
      position: 'start',
      onDragStart: onDragStart,
      onDrop: onDrop,
      onSnapEnd: onSnapEnd
    };
    chessBoard = Chessboard('chessBoard', config);

    function onDragStart(source, piece) {
      if (chessGame.game_over()) return false;
      if (piece.search(/^b/) !== -1 && chessMode.value !== 'online') return false;
      return true;
    }

    function onDrop(source, target) {
      try {
        const move = chessGame.move({
          from: source,
          to: target,
          promotion: 'q'
        });
        if (move === null) return 'snapback';
        if (chessGame.game_over()) {
          handleGameEnd();
        } else if (chessMode.value === 'ai') {
          setTimeout(makeAIMove, 500);
        } else {
          setTimeout(simulateOnlineMove, 1000);
        }
      } catch (err) {
        console.error('Chess move error:', err);
        return 'snapback';
      }
    }

    function onSnapEnd() {
      chessBoard.position(chessGame.fen());
    }

    function makeAIMove() {
      try {
        const depth = parseInt(chessDifficulty.value);
        const moves = chessGame.moves();
        if (moves.length === 0) return;
        const move = moves[Math.floor(Math.random() * moves.length)];
        chessGame.move(move);
        chessBoard.position(chessGame.fen());
        if (chessGame.game_over()) {
          handleGameEnd();
        }
      } catch (err) {
        console.error('AI move error:', err);
      }
    }

    function simulateOnlineMove() {
      try {
        if (chessGame.game_over()) return;
        const moves = chessGame.moves();
        if (moves.length === 0) return;
        const move = moves[Math.floor(Math.random() * moves.length)];
        chessGame.move(move);
        chessBoard.position(chessGame.fen());
        if (chessGame.game_over()) {
          handleGameEnd();
        }
      } catch (err) {
        console.error('Online move error:', err);
      }
    }

    function handleGameEnd() {
      try {
        let score = 50;
        if (chessGame.in_checkmate()) {
          score = chessGame.turn() === 'w' ? 0 : 100;
          alert(`Checkmate! ${score === 100 ? 'You win!' : 'You lose.'}`);
        } else if (chessGame.in_stalemate() || chessGame.in_draw()) {
          alert('Game Over! It\'s a draw.');
        }
        submitGameResult('chess', score);
        checkCompetitionResult('chess', score);
      } catch (err) {
        console.error('Game end error:', err);
      }
    }
  } catch (error) {
    console.error('Chess initialization failed:', error);
    chessBoardEl.innerHTML = '<p class="text-red-500 text-center">Failed to load Chess game. Please check your internet connection and try again.</p>';
  }
}

      function findOnlineOpponent() {
        alert('Searching for an online opponent...');
        setTimeout(() => {
          alert('Opponent found! Starting game.');
          chessGame.reset();
          chessBoard.position('start');
        }, 2000);
      }

      resetChessBtn.addEventListener('click', () => {
        if (requireLogin()) {
          chessGame.reset();
          chessBoard.position('start');
          if (chessMode.value === 'online') {
            findOnlineOpponent();
          }
        }
      });

      chessMode.addEventListener('change', () => {
        if (chessMode.value === 'online') {
          findOnlineOpponent();
        } else {
          chessGame.reset();
          chessBoard.position('start');
        }
      });

      // Sudoku Game
      function generateSudoku(emptyCells) {
        const board = Array(9).fill().map(() => Array(9).fill(0));
        fillDiagonal(board);
        fillRemaining(board, 0, 3);
        solutionBoard = board.map(row => [...row]);
        removeNumbers(board, emptyCells);
        return board;
      }

      function fillDiagonal(board) {
        for (let i = 0; i < 9; i += 3) {
          fillBox(board, i, i);
        }
      }

      function fillBox(board, row, col) {
        const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        for (let i = 0; i < 3; i++) {
          for (let j = 0; j < 3; j++) {
            const index = Math.floor(Math.random() * nums.length);
            board[row + i][col + j] = nums[index];
            nums.splice(index, 1);
          }
        }
      }

      function isSafe(board, row, col, num) {
        for (let x = 0; x < 9; x++) {
          if (board[row][x] === num || board[x][col] === num) return false;
        }
        const startRow = row - row % 3, startCol = col - col % 3;
        for (let i = 0; i < 3; i++) {
          for (let j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] === num) return false;
          }
        }
        return true;
      }

      function fillRemaining(board, row, col) {
        if (col >= 9 && row < 8) {
          row++;
          col = 0;
        }
        if (row >= 9 && col >= 9) return true;
        if (row < 3) {
          if (col < 3) col = 3;
        } else if (row < 6) {
          if (col === Math.floor(row / 3) * 3) col += 3;
        } else {
          if (col === 6) {
            row++;
            col = 0;
            if (row >= 9) return true;
          }
        }
        for (let num = 1; num <= 9; num++) {
          if (isSafe(board, row, col, num)) {
            board[row][col] = num;
            if (fillRemaining(board, row, col + 1)) return true;
            board[row][col] = 0;
          }
        }
        return false;
      }

      function removeNumbers(board, emptyCells) {
        let count = emptyCells;
        while (count > 0) {
          const row = Math.floor(Math.random() * 9);
          const col = Math.floor(Math.random() * 9);
          if (board[row][col] !== 0) {
            board[row][col] = 0;
            count--;
          }
        }
      }

function renderSudoku() {
  try {
    sudokuGrid.innerHTML = '';
    sudokuBoard = generateSudoku(parseInt(sudokuDifficulty.value));
    for (let i = 0; i < 9; i++) {
      for (let j = 0; j < 9; j++) {
        const cell = document.createElement('div');
        cell.className = 'sudoku-cell';
        if (sudokuBoard[i][j] !== 0) {
          cell.textContent = sudokuBoard[i][j];
        } else {
          const input = document.createElement('input');
          input.type = 'text';
          input.maxLength = 1;
          input.addEventListener('input', (e) => {
            try {
              const value = e.target.value;
              if (value && !/^[1-9]$/.test(value)) {
                e.target.value = '';
              }
              sudokuBoard[i][j] = value ? parseInt(value) : 0;
            } catch (err) {
              console.error('Sudoku input error:', err);
            }
          });
          cell.appendChild(input);
        }
        sudokuGrid.appendChild(cell);
      }
    }
  } catch (err) {
    console.error('Sudoku render error:', err);
    sudokuGrid.innerHTML = '<p class="text-red-500 text-center">Failed to load Sudoku. Please try again.</p>';
  }
}

      function checkSudokuSolution() {
        let correct = true;
        const cells = sudokuGrid.querySelectorAll('.sudoku-cell input');
        cells.forEach((input, index) => {
          const row = Math.floor(index / 9);
          const col = index % 9;
          const value = parseInt(input.value) || 0;
          if (value !== solutionBoard[row][col]) {
            input.classList.add('error');
            correct = false;
          } else {
            input.classList.remove('error');
          }
        });
        if (correct) {
          const score = parseInt(sudokuDifficulty.value) * 2;
          alert('Congratulations! You solved the Sudoku!');
          submitGameResult('sudoku', score);
          checkCompetitionResult('sudoku', score);
        } else {
          alert('Some numbers are incorrect. Try again!');
        }
      }

      resetSudokuBtn.addEventListener('click', () => {
        if (requireLogin()) {
          renderSudoku();
        }
      });

      checkSudokuBtn.addEventListener('click', () => {
        if (requireLogin()) {
          checkSudokuSolution();
        }
      });

      // Memory Match Game
// Memory Match
function initMemoryGame() {
  try {
    const symbols = ['🍎', '🍐', '🍊', '🍋', '🍉', '🍇', '🍎', '🍐', '🍊', '🍋', '🍉', '🍇'];
    memoryCards = symbols.sort(() => Math.random() - 0.5).map((symbol, index) => ({
      id: index,
      symbol,
      flipped: false,
      matched: false
    }));
    renderMemoryGame();
  } catch (err) {
    console.error('Memory game initialization error:', err);
    memoryGrid.innerHTML = '<p class="text-red-500 text-center">Failed to load Memory Match. Please try again.</p>';
  }
}

      function renderMemoryGame() {
        memoryGrid.innerHTML = '';
        let moves = 0;
        let firstCard = null;
        memoryCards.forEach(card => {
          const cardEl = document.createElement('div');
          cardEl.className = `memory-card ${card.flipped ? 'flipped' : ''}`;
          cardEl.dataset.id = card.id;
          cardEl.innerHTML = `<img src="https://via.placeholder.com/80?text=${encodeURIComponent(card.symbol)}" alt="Memory card">`;
          cardEl.addEventListener('click', () => {
            if (!requireLogin() || card.flipped || card.matched || (firstCard && firstCard.id !== card.id && memoryCards.filter(c => c.flipped && !c.matched).length >= 2)) return;
            card.flipped = true;
            cardEl.classList.add('flipped');
            const flippedCards = memoryCards.filter(c => c.flipped && !c.matched);
            if (flippedCards.length === 2) {
              moves++;
              const [card1, card2] = flippedCards;
              if (card1.symbol === card2.symbol) {
                card1.matched = card2.matched = true;
                if (memoryCards.every(c => c.matched)) {
                  const score = Math.max(100 - moves * 2, 10);
                  alert(`Game Over! You won with ${moves} moves!`);
                  submitGameResult('memory', score);
                  checkCompetitionResult('memory', score);
                }
              } else {
                setTimeout(() => {
                  card1.flipped = card2.flipped = false;
                  document.querySelector(`.memory-card[data-id="${card1.id}"]`).classList.remove('flipped');
                  document.querySelector(`.memory-card[data-id="${card2.id}"]`).classList.remove('flipped');
                }, 1000);
              }
            }
            firstCard = card;
          });
          memoryGrid.appendChild(cardEl);
        });
      }

      resetMemoryBtn.addEventListener('click', () => {
        if (requireLogin()) {
          initMemoryGame();
        }
      });

      // Tic-Tac-Toe Game
function initTictactoe() {
  try {
    tictactoeBoard = Array(9).fill('');
    currentPlayer = 'X';
    renderTictactoe();
  } catch (err) {
    console.error('Tic-Tac-Toe initialization error:', err);
    tictactoeGrid.innerHTML = '<p class="text-red-500 text-center">Failed to load Tic-Tac-Toe. Please try again.</p>';
  }
}

      function renderTictactoe() {
        tictactoeGrid.innerHTML = '';
        tictactoeBoard.forEach((cell, index) => {
          const cellEl = document.createElement('div');
          cellEl.className = 'tictactoe-cell';
          cellEl.textContent = cell;
          cellEl.addEventListener('click', () => {
            if (!requireLogin() || cell || checkTictactoeWin() || tictactoeBoard.every(c => c)) return;
            tictactoeBoard[index] = 'X';
            cellEl.textContent = 'X';
            if (checkTictactoeWin()) {
              alert('You win!');
              submitGameResult('tictactoe', 100);
              checkCompetitionResult('tictactoe', 100);
            } else if (tictactoeBoard.every(c => c)) {
              alert('It\'s a draw!');
              submitGameResult('tictactoe', 50);
              checkCompetitionResult('tictactoe', 50);
            } else {
              makeTictactoeAIMove();
            }
          });
          tictactoeGrid.appendChild(cellEl);
        });
      }

      function checkTictactoeWin() {
        const wins = [
          [0,1,2], [3,4,5], [6,7,8], // Rows
          [0,3,6], [1,4,7], [2,5,8], // Columns
          [0,4,8], [2,4,6] // Diagonals
        ];
        return wins.some(combo => {
          return combo.every(i => tictactoeBoard[i] && tictactoeBoard[i] === tictactoeBoard[combo[0]]);
        });
      }

      function makeTictactoeAIMove() {
        const emptyCells = tictactoeBoard.map((cell, i) => cell === '' ? i : null).filter(i => i !== null);
        if (emptyCells.length === 0) return;
        let move;
        if (tictactoeDifficulty.value === 'hard') {
          let bestScore = -Infinity;
          let bestMove;
          for (let i of emptyCells) {
            tictactoeBoard[i] = 'O';
            const score = minimax(tictactoeBoard, false);
            tictactoeBoard[i] = '';
            if (score > bestScore) {
              bestScore = score;
              bestMove = i;
            }
          }
          move = bestMove;
        } else {
          move = emptyCells[Math.floor(Math.random() * emptyCells.length)];
        }
        tictactoeBoard[move] = 'O';
        tictactoeGrid.children[move].textContent = 'O';
        if (checkTictactoeWin()) {
          alert('AI wins!');
          submitGameResult('tictactoe', 0);
          checkCompetitionResult('tictactoe', 0);
        } else if (tictactoeBoard.every(c => c)) {
          alert('It\'s a draw!');
          submitGameResult('tictactoe', 50);
          checkCompetitionResult('tictactoe', 50);
        }
      }

      function minimax(board, isMaximizing) {
        if (checkTictactoeWin()) {
          return isMaximizing ? -1 : 1;
        }
        if (board.every(c => c)) return 0;
        if (isMaximizing) {
          let bestScore = -Infinity;
          for (let i = 0; i < 9; i++) {
            if (!board[i]) {
              board[i] = 'O';
              const score = minimax(board, false);
              board[i] = '';
              bestScore = Math.max(score, bestScore);
            }
          }
          return bestScore;
        } else {
          let bestScore = Infinity;
          for (let i = 0; i < 9; i++) {
            if (!board[i]) {
              board[i] = 'X';
              const score = minimax(board, true);
              board[i] = '';
              bestScore = Math.min(score, bestScore);
            }
          }
          return bestScore;
        }
      }

      resetTictactoeBtn.addEventListener('click', () => {
        if (requireLogin()) {
          initTictactoe();
        }
      });

      // 2048 Game
function init2048() {
  try {
    game2048Board = Array(4).fill().map(() => Array(4).fill(0));
    game2048Score = 0;
    addTile();
    addTile();
    render2048();
  } catch (err) {
    console.error('2048 initialization error:', err);
    game2048.innerHTML = '<p class="text-red-500 text-center">Failed to load 2048. Please try again.</p>';
  }
}

      function addTile() {
        const emptyCells = [];
        for (let i = 0; i < 4; i++) {
          for (let j = 0; j < 4; j++) {
            if (game2048Board[i][j] === 0) {
              emptyCells.push({ i, j });
            }
          }
        }
        if (emptyCells.length > 0) {
          const { i, j } = emptyCells[Math.floor(Math.random() * emptyCells.length)];
          game2048Board[i][j] = Math.random() < 0.9 ? 2 : 4;
        }
      }

      function render2048() {
        game2048.innerHTML = '';
        for (let i = 0; i < 4; i++) {
          for (let j = 0; j < 4; j++) {
            const tile = document.createElement('div');
            tile.className = 'tile';
            tile.dataset.value = game2048Board[i][j];
            tile.textContent = game2048Board[i][j] !== 0 ? game2048Board[i][j] : '';
            game2048.appendChild(tile);
          }
        }
      }

      function move2048(direction) {
        let moved = false;
        const newBoard = game2048Board.map(row => [...row]);
        if (direction === 'left') {
          for (let i = 0; i < 4; i++) {
            let row = newBoard[i].filter(val => val);
            for (let j = 0; j < row.length - 1; j++) {
              if (row[j] === row[j + 1]) {
                row[j] *= 2;
                game2048Score += row[j];
                row[j + 1] = 0;
              }
            }
            row = row.filter(val => val);
            while (row.length < 4) row.push(0);
            newBoard[i] = row;
          }
        } else if (direction === 'right') {
          for (let i = 0; i < 4; i++) {
            let row = newBoard[i].filter(val => val);
            for (let j = row.length - 1; j > 0; j--) {
              if (row[j] === row[j - 1]) {
                row[j] *= 2;
                game2048Score += row[j];
                row[j - 1] = 0;
              }
            }
            row = row.filter(val => val);
            while (row.length < 4) row.unshift(0);
            newBoard[i] = row;
          }
        } else if (direction === 'up') {
          for (let j = 0; j < 4; j++) {
            let col = [newBoard[0][j], newBoard[1][j], newBoard[2][j], newBoard[3][j]].filter(val => val);
            for (let i = 0; i < col.length - 1; i++) {
              if (col[i] === col[i + 1]) {
                col[i] *= 2;
                game2048Score += col[i];
                col[i + 1] = 0;
              }
            }
            col = col.filter(val => val);
            while (col.length < 4) col.push(0);
            for (let i = 0; i < 4; i++) newBoard[i][j] = col[i];
          }
        } else if (direction === 'down') {
          for (let j = 0; j < 4; j++) {
            let col = [newBoard[0][j], newBoard[1][j], newBoard[2][j], newBoard[3][j]].filter(val => val);
            for (let i = col.length - 1; i > 0; i--) {
              if (col[i] === col[i - 1]) {
                col[i] *= 2;
                game2048Score += col[i];
                col[i - 1] = 0;
              }
            }
            col = col.filter(val => val);
            while (col.length < 4) col.unshift(0);
            for (let i = 0; i < 4; i++) newBoard[i][j] = col[i];
          }
        }
        moved = JSON.stringify(newBoard) !== JSON.stringify(game2048Board);
        game2048Board = newBoard;
        if (moved) {
          addTile();
          render2048();
          if (game2048Board.some(row => row.includes(2048))) {
            alert('Congratulations! You reached 2048!');
            submitGameResult('2048', game2048Score);
            checkCompetitionResult('2048', game2048Score);
          } else if (!canMove()) {
            alert('Game Over!');
            submitGameResult('2048', game2048Score);
            checkCompetitionResult('2048', game2048Score);
          }
        }
      }

      function canMove() {
        for (let i = 0; i < 4; i++) {
          for (let j = 0; j < 4; j++) {
            if (game2048Board[i][j] === 0) return true;
            if (j < 3 && game2048Board[i][j] === game2048Board[i][j + 1]) return true;
            if (i < 3 && game2048Board[i][j] === game2048Board[i + 1][j]) return true;
          }
        }
        return false;
      }

      document.addEventListener('keydown', (e) => {
        if (!requireLogin()) return;
        if (game2048.classList.contains('active')) {
          if (e.key === 'ArrowLeft') move2048('left');
          else if (e.key === 'ArrowRight') move2048('right');
          else if (e.key === 'ArrowUp') move2048('up');
          else if (e.key === 'ArrowDown') move2048('down');
        }
      });

      reset2048Btn.addEventListener('click', () => {
        if (requireLogin()) {
          init2048();
        }
      });

      // Render Leaderboards
      function renderLeaderboards() {
        Object.keys(leaderboards).forEach(game => {
          const leaderboardEl = document.getElementById(`${game}Leaderboard`);
          leaderboardEl.innerHTML = leaderboards[game].map((entry, index) => `
            <tr>
              <td>${index + 1}</td>
              <td>${entry.name}</td>
              <td>${entry.score}</td>
            </tr>
          `).join('');
        });
      }

      // Competitions
      async function fetchCompetitions() {
        try {
          activeCompetitions = [
            {
              id: 1,
              game: 'chess',
              title: 'Monthly Chess Championship',
              description: 'Compete in chess to climb the leaderboard!',
              start_date: '2025-05-01',
              end_date: '2025-05-31',
              status: 'ongoing'
            },
            {
              id: 2,
              game: 'sudoku',
              title: 'Sudoku Sprint',
              description: 'Solve Sudoku puzzles to earn points!',
              start_date: '2025-05-01',
              end_date: '2025-05-31',
              status: 'ongoing'
            }
          ];
          renderCompetitions();
        } catch (err) {
          console.error('Fetch competitions error:', err);
        }
      }

      function renderCompetitions() {
        competitionGrid.innerHTML = activeCompetitions.map(comp => `
          <div class="competition-card">
            <span class="status-badge">${comp.status}</span>
            <h4>${comp.title}</h4>
            <p>${comp.description}</p>
            <button class="join-btn" data-competition="${comp.id}">Join Competition</button>
            <div class="competition-leaderboard" id="leaderboard-${comp.id}">
              <table>
                <thead>
                  <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Score</th>
                  </tr>
                </thead>
                <tbody id="leaderboard-body-${comp.id}"></tbody>
              </table>
            </div>
          </div>
        `).join('');

        document.querySelectorAll('.join-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            if (await requireLogin()) {
              const competitionId = btn.dataset.competition;
              const competition = activeCompetitions.find(c => c.id == competitionId);
              document.querySelectorAll('.game-container').forEach(container => {
                container.classList.remove('active');
              });
              document.getElementById(`${competition.game}Game`).classList.add('active');
              alert(`Joined ${competition.title}!`);
            }
          });
        });

        activeCompetitions.forEach(comp => {
          const leaderboardBody = document.getElementById(`leaderboard-body-${comp.id}`);
          const gameLeaderboard = leaderboards[comp.game] || [];
          leaderboardBody.innerHTML = gameLeaderboard.map((entry, index) => `
            <tr>
              <td>${index + 1}</td>
              <td>${entry.name}</td>
              <td>${entry.score}</td>
            </tr>
          `).join('');
        });
      }

      // Initialize
      async function init() {
        await checkUser();
        renderDays();
        renderContent();
        initChess();
        renderSudoku();
        initMemoryGame();
        initTictactoe();
        init2048();
        renderLeaderboards();
        fetchCompetitions();
      }

      init();
    });
  </script>
</body>
</html>
