<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Summer Special - GuideAspire</title>
  <style>
    :root {
      --bg-color: linear-gradient(to bottom right, #e6f3ff, #f3e8ff);
      --card-bg: #ffffff;
      --text-color: #4b5563;
      --header-color: #1e40af;
      --button-bg: #3b82f6;
      --button-hover: #2563eb;
      --completed-bg: #22c55e;
      --error-color: #dc2626;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      --border-color: #e5e7eb;
    }
    [data-theme="night"] {
      --bg-color: linear-gradient(to bottom right, #1e293b, #334155);
      --card-bg: #2d3748;
      --text-color: #d1d5db;
      --header-color: #60a5fa;
      --button-bg: #4b9bff;
      --button-hover: #3b82f6;
      --completed-bg: #34d399;
      --error-color: #f87171;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      --border-color: #4b5563;
    }
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: var(--bg-color);
      min-height: 100vh;
      padding: 20px;
      color: var(--text-color);
      transition: background 0.3s, color 0.3s;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
    }
    header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
    }
    header h1 {
      font-size: clamp(25px,2.5vw,40px);
      color: var(--header-color);
      animation: fadeIn 1s ease-in;
    }
    header p {
      font-size: 1.2rem;
      margin: 10px 0;
    }
    .theme-toggle {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 8px 16px;
      background: var(--button-bg);
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      transition: background 0.3s;
    }
    .theme-toggle:hover {
      background: var(--button-hover);
    }
    .progress-bar {
      width: 100%;
      background: var(--border-color);
      border-radius: 10px;
      height: 20px;
      margin-bottom: 20px;
      overflow: hidden;
    }
    .progress-bar-fill {
      background: var(--button-bg);
      height: 100%;
      transition: width 0.3s;
    }
    .task-card {
      background: var(--card-bg);
      border-radius: 8px;
      box-shadow: var(--shadow);
      margin-bottom: 20px;
      transition: transform 0.3s;
    }
    .task-card:hover {
      transform: scale(1.02);
    }
    .task-header {
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
    .task-header h2 {
      font-size: 1.5rem;
      color: var(--header-color);
      margin: 0;
    }
    .task-header button {
      padding: 10px 20px;
      border: none;
      border-radius: 20px;
      font-size: 1rem;
      cursor: pointer;
      background: var(--button-bg);
      color: white;
      transition: background 0.3s;
    }
    .task-header button.completed {
      background: var(--completed-bg);
    }
    .task-header button:not(.completed):hover {
      background: var(--button-hover);
    }
    .task-details {
      padding: 0 20px 20px;
      display: none;
      border-top: 1px solid var(--border-color);
      animation: slideDown 0.3s ease-out;
    }
    .task-details.active {
      display: block;
    }
    .task-details p {
      margin: 10px 0;
    }
    .video-container {
      position: relative;
      padding-bottom: 56.25%;
      height: 0;
      overflow: hidden;
      margin-bottom: 20px;
    }
    .video-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    footer {
      text-align: center;
      margin-top: 40px;
    }
    .loading {
      text-align: center;
      font-size: 1.2rem;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
    }
    .spinner {
      border: 4px solid var(--border-color);
      border-top: 4px solid var(--button-bg);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }
    .error {
      text-align: center;
      font-size: 1.2rem;
      color: var(--error-color);
      display: none;
    }
    .error button {
      padding: 8px 16px;
      background: var(--button-bg);
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      margin-left: 10px;
    }
    .error button:hover {
      background: var(--button-hover);
    }
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 10px 20px;
      background: var(--completed-bg);
      color: white;
      border-radius: 8px;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: 1000;
    }
    .toast.error {
      background: var(--error-color);
    }
    .toast.show {
      opacity: 1;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    @keyframes slideDown {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    @media (max-width: 768px) {
      header p { font-size: 1rem; }
      .task-header { flex-direction: column; align-items: flex-start; gap: 10px; }
      .task-header button { align-self: flex-end; }
      .theme-toggle { top: 0; right: 0; }
    }
    @media (max-width: 480px) {
      .task-header h2 { font-size: 1.2rem; }
      .task-details p { font-size: 0.9rem; }
      .progress-bar { height: 15px; }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Summer Special - GuideAspire</h1>
      <p>25 Days of Career Exploration for Your Dream Job</p>
      <button class="theme-toggle" aria-label="Toggle theme">🌙 Night Mode</button>
    </header>
    <div class="progress-bar">
      <div class="progress-bar-fill" id="progress-bar-fill" style="width: 0%"></div>
    </div>
    <div id="task-list"></div>
    <div id="loading" class="loading">
      <div class="spinner"></div>Loading...
    </div>
    <div id="error" class="error">
      Failed to load progress. <button onclick="fetchProgress()">Retry</button>
    </div>
    <div id="toast" class="toast"></div>
    <footer>
      <p id="progress">Progress: 0 / 25 days completed</p>
      <p>© 2025 GuideAspire. All rights reserved.</p>
    </footer>
  </div>
  <script>
    // Configuration
    const userEmail = localStorage.getItem("userEmail") || (window.location.href = "/login");
    const category = "summer_special";
    const jobId = "summer2025";
    const apiBaseUrl = "http://localhost:3000";
    const language = "english"; // Default language

    // DOM elements
    const taskList = document.getElementById("task-list");
    const loading = document.getElementById("loading");
    const error = document.getElementById("error");
    const progressText = document.getElementById("progress");
    const progressBarFill = document.getElementById("progress-bar-fill");
    const themeToggle = document.querySelector(".theme-toggle");
    const toast = document.getElementById("toast");

    // State
    let progress = [];
    let programDays = [];

    // Theme handling
    function setTheme(theme) {
      document.body.dataset.theme = theme;
      themeToggle.textContent = theme === "night" ? "☀️ Daylight Mode" : "🌙 Night Mode";
      themeToggle.setAttribute("aria-label", `Switch to ${theme === "night" ? "daylight" : "night"} mode`);
      localStorage.setItem("theme", theme);
    }

    themeToggle.addEventListener("click", () => {
      const currentTheme = document.body.dataset.theme || "daylight";
      setTheme(currentTheme === "daylight" ? "night" : "daylight");
    });

    // Initialize theme
    const savedTheme = localStorage.getItem("theme") || "daylight";
    setTheme(savedTheme);

    // Toast notification
    function showToast(message, isError = false) {
      toast.textContent = message;
      toast.className = `toast ${isError ? "error" : ""} show`;
      setTimeout(() => {
        toast.className = "toast";
      }, 3000);
    }

    // Fetch program days
    async function fetchProgramDays() {
      loading.style.display = "flex";
      error.style.display = "none";
      try {
        programDays = [];
        for (let day = 1; day <= 25; day++) {
          // Fetch content
          const contentResponse = await fetch(`${apiBaseUrl}/api/summer/content/${category}/${day}`);
          if (!contentResponse.ok) throw new Error(`Failed to fetch content for day ${day}`);
          const content = await contentResponse.json();

          // Fetch video
          const videoResponse = await fetch(`${apiBaseUrl}/api/summer/video/${category}/${day}/${language}`);
          if (!videoResponse.ok) throw new Error(`Failed to fetch video for day ${day}`);
          const video = await videoResponse.json();

          programDays.push({
            day,
            role: content.role || `Role for Day ${day}`,
            task: content.task || `Task for Day ${day}`,
            youtube: video.youtube_id ? `https://www.youtube.com/embed/${video.youtube_id}` : "",
            practical: content.practical || `Practical session for Day ${day}`
          });
        }
        console.log("Fetched program days:", programDays);
        renderTasks();
        loading.style.display = "none";
      } catch (err) {
        console.error("Error fetching program days:", err);
        error.style.display = "block";
        loading.style.display = "none";
        showToast("Failed to load tasks and videos.", true);
      }
    }

    // Fetch progress
    async function fetchProgress() {
      loading.style.display = "flex";
      error.style.display = "none";
      try {
        const response = await fetch(`${apiBaseUrl}/summer-progress/${encodeURIComponent(userEmail)}/${category}/${jobId}`);
        if (!response.ok) throw new Error("Failed to fetch progress");
        const data = await response.json();
        progress = Array.isArray(data) ? data : [];
        renderTasks();
        updateProgress();
        loading.style.display = "none";
      } catch (err) {
        console.error("Error fetching progress:", err);
        error.style.display = "block";
        loading.style.display = "none";
        showToast("Failed to load progress.", true);
      }
    }

    // Save progress
    async function saveProgress(day) {
      try {
        const response = await fetch(`${apiBaseUrl}/summer-progress`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: userEmail, category, jobId, dayNumber: day }),
        });
        if (!response.ok) throw new Error("Failed to save progress");
        const data = await response.json();
        progress = Array.isArray(data.completedDays) ? data.completedDays : progress;
        renderTasks();
        updateProgress();
        error.style.display = "none";
        showToast(`Day ${day} ${progress.includes(day) ? "marked as complete" : "unmarked"}!`);
      } catch (err) {
        console.error("Error saving progress:", err);
        error.style.display = "block";
        showToast("Failed to save progress.", true);
      }
    }

    // Render tasks
    function renderTasks() {
      taskList.innerHTML = "";
      programDays.forEach(({ day, role, task, youtube, practical }) => {
        const card = document.createElement("div");
        card.className = "task-card";
        card.innerHTML = `
          <div class="task-header" role="button" aria-expanded="false" aria-controls="details-${day}">
            <h2>Day ${day}: ${role}</h2>
            <button class="${progress.includes(day) ? "completed" : ""}" aria-label="${progress.includes(day) ? "Unmark Day " + day + " as complete" : "Mark Day " + day + " as complete"}">
              ${progress.includes(day) ? "Completed" : "Mark Complete"}
            </button>
          </div>
          <div class="task-details" id="details-${day}">
            <p><strong>Task:</strong> ${task}</p>
            ${youtube ? `
              <div class="video-container">
                <iframe src="${youtube}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen title="Tutorial for Day ${day}"></iframe>
              </div>
            ` : '<p><strong>Error:</strong> Video not available for this day.</p>'}
            <p><strong>Practical Session:</strong></p>
            <p>${practical.replace(/\n/g, "<br>")}</p>
          </div>
        `;
        const header = card.querySelector(".task-header");
        const details = card.querySelector(".task-details");
        const button = card.querySelector("button");
        header.addEventListener("click", (e) => {
          if (e.target !== button) {
            const isExpanded = details.classList.toggle("active");
            header.setAttribute("aria-expanded", isExpanded);
          }
        });
        button.addEventListener("click", () => saveProgress(day));
        taskList.appendChild(card);
      });
    }

    // Update progress
    function updateProgress() {
      progressText.textContent = `Progress: ${progress.length} / 25 days completed`;
      progressBarFill.style.width = `${(progress.length / 25) * 100}%`;
    }

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        const focused = document.activeElement;
        if (focused.classList.contains("task-header") && !focused.querySelector("button").contains(e.target)) {
          focused.click();
        }
      }
    });

    // Initialize
    fetchProgramDays();
    fetchProgress();
  </script>
</body>
</html>